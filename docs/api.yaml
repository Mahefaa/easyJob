openapi: 3.0.3
info:
  title: Easy Job
  description: Easiest way to find a job
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
paths:
  /ping:
    get:
      operationId: ping
      tags:
        - Security
      summary: replies with pong if server is OK.
      responses:
        200:
          description: pong
          content:
            application/json:
              schema:
                type: string
                example: pong
  /whoami:
    get:
      tags:
        - Security
      summary: tells you who you are
      operationId: whoami
      responses:
        200:
          description: yourself as our user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /domains:
    get:
      summary: get all domains
      tags:
        - Domains
      operationId: getDomainsByName
      parameters:
        - name: page
          required: true
          in: query
          schema:
            type: integer
            minimum: 1
        - name: pageSize
          required: true
          in: query
          schema:
            type: integer
            maximum: 500
        - name: name
          required: false
          in: query
          schema:
            type: string
      responses:
        200:
          description: domain list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Domain'
    put:
      operationId: createOrUpdateDomains
      summary: update domains if ids are provided. Create them otherwise.
      tags:
        - Domains
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveDomain'
      responses:
        200:
          description: updated's domain list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Domain'
  /users:
    get:
      tags:
        - Users
      summary: get users.
      operationId: getUsers
      parameters:
        - name: page
          required: true
          in: query
          schema:
            type: integer
            minimum: 1
        - name: pageSize
          required: true
          in: query
          schema:
            type: integer
            maximum: 500
        - name: mail
          in: query
          schema:
            type: string
        - name: role
          in: query
          schema:
            type: string
      responses:
        200:
          description: list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      summary: get users by id
      tags:
        - Users
      operationId: getUserById
      parameters:
        - name: id
          required: true
          in: query
          schema:
            type: integer
      responses:
        200:
          description: a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: update user if is is provided. Create it otherwise.
      tags:
        - Users
      operationId: updateUser
      parameters:
        - name: id
          required: true
          in: query
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CreateUser'
              properties:
                role:
                  $ref: '#/components/schemas/Role'
      responses:
        200:
          description: a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/admins:
    post:
      summary: create users with role ADMIN.
      operationId: createAdmin
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        200:
          description: created admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/candidates:
    post:
      summary: create users with role CANDIDATE.
      operationId: createCandidate
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        200:
          description: created candidate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/recruiters:
    post:
      summary: create users with role RECRUITER.
      operationId: createRecruiter
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        200:
          description: created recruiter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}/roles:
    put:
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  $ref: '#/components/schemas/Role'
      responses:
        200:
          description: update user with new role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}/messages:
    get:
      tags:
        - Messages
      summary: get all messages sent from admin account to this one.
      operationId: getMessagesByUser
      parameters:
        - name: page
          required: true
          in: query
          schema:
            type: integer
            minimum: 1
        - name: pageSize
          required: true
          in: query
          schema:
            type: integer
            maximum: 500
        - name: id
          in: path
          schema:
            type: integer
      responses:
        200:
          description: messages order from the latest received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

  /offers:
    get:
      operationId: getOffers
      summary: get all offers.
      tags:
        - Offers
      parameters:
        - name: page
          required: true
          in: query
          schema:
            type: integer
            minimum: 1
        - name: pageSize
          required: true
          in: query
          schema:
            type: integer
            maximum: 500
        - name: filter
          description: multi-criteria ignore case filter for any field in offer except ID
          in: query
          schema:
            type: string
      responses:
        200:
          description: Paginated Offer list ordered by creation date asc.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer'
  /offers/{id}:
    get:
      operationId: getOfferById
      summary: get one offer by its id.
      tags:
        - Offers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: the offer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
  /users/{userId}/offers:
    put:
      tags:
        - Offers
      operationId: createOrUpdateOffers
      summary: update offers if ID is provided. Create them otherwise.
      description: |
        these values will be ignored during creation:
          * senderEmail (user with userId's email)
          * status (default AVAILABLE)
          *
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Offer'
      responses:
        200:
          description: Just updated offers list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer'
  /users/{userId}/offers/{id}/close:
    get:
      tags:
        - Offers
      summary: closes an offer
      operationId: closeOffer
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: the offer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
  /users/{userId}/appliances:
    get:
      tags:
        - Appliances
      operationId: getAppliances
      summary: get all appliances that user id has sent.
      parameters:
        - name: userId
          in: path
          schema:
            type: integer

      responses:
        200:
          description: get all appliances sent by user id.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appliance'
    put:
      tags:
        - Appliances
      operationId: createOrUpdateAppliances
      summary: update appliances if id is given. Create them otherwise.
      responses:
        200:
          description: updated appliances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CreateAppliance'
  /users/{userId}/appliances/{id}:
    get:
      tags:
        - Appliances
      operationId: getApplianceById
      summary: get one appliance by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: one appliance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appliance'
  /users/{userId}/offers/{offerId}/appliances/:
    get:
      tags:
        - Appliances
      operationId: getAppliances
      summary: get all appliances
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: offerId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: get all appliances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appliance'
  /users/{userId}/offers/{offerId}/appliances/{id}:
    get:
      tags:
        - Appliances
      operationId: getApplianceById
      summary: get one appliance by id
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: offerId
          in: path
          required: true
          schema:
            type: integer
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: one appliance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appliance'
  /users/{userId}/offers/{offerId}/appliances/{id}/act:
    put:
      tags:
        - Appliances
      operationId: updateApplianceState
      summary: accepts or rejects appliance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - ACCEPT
                    - REJECT
      responses:
        200:
          description: update appliance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appliance'
components:
  schemas:
    SaveOffer:
      type: object
      properties:
        id:
          type: integer
          example: 1
        domain:
          type: string
          example: domain1
        mission:
          type: string
          example: develop web app in 15 minutes
        position:
          type: string
          example: backend developer
        profile:
          type: string
          example: 20 y.o and single
        sender:
          type: string
          format: email
        location:
          type: string
          example: 'Konoha'
    Offer:
      type: object
      properties:
        id:
          type: string
          example: offer_id1
        ref:
          type: string
          example: offer_ref1
        status:
          type: string
          enum:
            - AVAILABLE
            - TAKEN
        domain:
          $ref: '#/components/schemas/Domain'
        position:
          type: string
          example: offer_position1
        profile:
          type: string
          example: offer_profile1
        mission:
          type: string
          example: offer_mission1
        sender_email:
          type: string
          format: email
        location:
          type: string
          example: 'Konoha'
    CreateAppliance:
      type: object
      properties:
        offerId:
          type: integer
          example: 1
        id:
          type: string
          example: appliance_id1
    Appliance:
      type: object
      properties:
        offer:
          $ref: '#/components/schemas/Offer'
        candidate:
          $ref: '#/components/schemas/Candidate'
        applianceDate:
          type: string
          format: date-time
        Status:
          type: string
          enum:
            - ONGOING
            - APPROVED
            - REJECTED
    Candidate:
      type: object
      properties:
        id:
          type: string
          example: candidate_id1
        name:
          type: string
          example: Mahefa Ny Anjara
        email:
          type: string
          format: email
          example: candidate_email1
    SaveDomain:
      type: object
      properties:
        id:
          type: string
          example: domain_id
        name:
          type: string
          example: domain_name
    Domain:
      allOf:
        - $ref: "#/components/schemas/SaveDomain"
      properties:
        available_job_offers:
          type: integer
          example: 10
    CreateUser:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
        password:
          type: string
          example: hashedPassword
        enabled:
          type: boolean
    User:
      allOf:
        - $ref: '#/components/schemas/CreateUser'
      properties:
        role:
          $ref: '#/components/schemas/Role'
        joinedInstant:
          type: string
          format: date-time
    Message:
      type: object
      properties:
        content:
          type: string
        user:
          $ref: '#/components/schemas/User'
        otherUser:
          $ref: '#/components/schemas/User'
        creationInstant:
          type: string
          format: date-time
    Role:
      type: string
      enum:
        - admin
        - recruiter
        - candidate
      default: candidate
